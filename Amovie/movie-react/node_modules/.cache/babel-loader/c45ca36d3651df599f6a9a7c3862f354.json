{"ast":null,"code":"var _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useFetch(url) {\n  _s2();\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const isMounted = useRef(false);\n  useEffect(() => {\n    var _s = $RefreshSig$();\n\n    async function fetchPosts() {\n      _s();\n\n      const isMounted = useIsMounted();\n      const response = await fetch(url);\n      setLoading(false);\n      var result;\n\n      if (isJson(response)) {\n        result = await response.json();\n      }\n\n      if (response.status === 404) {\n        result = {\n          error404: \"Resourse not found\"\n        };\n      } else {\n        result = result || {\n          error: \"Somthing went wrong\"\n        };\n      }\n\n      if (response.status >= 200 && response.status < 300) {\n        setData(result);\n      } else {\n        setError(result);\n      }\n    }\n\n    _s(fetchPosts, \"pyk+LM2BHdKDRkrlX0QDpXg3SA0=\", false, function () {\n      return [useIsMounted];\n    });\n\n    fetchPosts();\n  }, [url]);\n  return {\n    data,\n    loading,\n    error\n  };\n}\n\n_s2(useFetch, \"jDuQJa9iqBRfLUyxwFzB+Vtsuck=\");\n\nfunction isJson(response) {\n  var _response$headers$get;\n\n  return (_response$headers$get = response.headers.get(\"Content-type\")) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes(\"json\");\n}\n\nconst useIsMounted = () => {\n  _s3();\n\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n\n_s3(useIsMounted, \"SkOohDVuXBk0DO6XXkvUZnCZ6So=\");","map":{"version":3,"sources":["D:/Amovie/Amovie/movie-react/src/hooks/useFetch.tsx"],"names":["useEffect","useRef","useState","useFetch","url","data","setData","loading","setLoading","error","setError","isMounted","fetchPosts","useIsMounted","response","fetch","result","isJson","json","status","error404","headers","get","includes","current"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,eAAe,SAASC,QAAT,CAA+BC,GAA/B,EAA4C;AAAA;;AACzD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAW,IAAX,CAAhC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAMS,SAAS,GAAGV,MAAM,CAAC,KAAD,CAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,mBAAeY,UAAf,GAA4B;AAAA;;AAC9B,YAAMD,SAAS,GAAGE,YAAY,EAA9B;AACI,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACX,GAAD,CAA5B;AACAI,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,UAAIQ,MAAJ;;AACA,UAAIC,MAAM,CAACH,QAAD,CAAV,EAAsB;AACpBE,QAAAA,MAAM,GAAG,MAAMF,QAAQ,CAACI,IAAT,EAAf;AACD;;AACD,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AAC3BH,QAAAA,MAAM,GAAG;AAAEI,UAAAA,QAAQ,EAAE;AAAZ,SAAT;AACD,OAFD,MAEO;AACLJ,QAAAA,MAAM,GAAGA,MAAM,IAAI;AAAEP,UAAAA,KAAK,EAAE;AAAT,SAAnB;AACD;;AAED,UAAIK,QAAQ,CAACK,MAAT,IAAmB,GAAnB,IAA0BL,QAAQ,CAACK,MAAT,GAAkB,GAAhD,EAAqD;AACnDb,QAAAA,OAAO,CAACU,MAAD,CAAP;AACD,OAFD,MAEO;AACLN,QAAAA,QAAQ,CAACM,MAAD,CAAR;AACD;AACF;;AApBa,OACCJ,UADD;AAAA,cAEEC,YAFF;AAAA;;AAqBdD,IAAAA,UAAU;AACX,GAtBQ,EAsBN,CAACR,GAAD,CAtBM,CAAT;AAwBA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAP;AACD;;IA/BuBN,Q;;AAiCxB,SAASc,MAAT,CAAgBH,QAAhB,EAAoC;AAAA;;AAClC,kCAAOA,QAAQ,CAACO,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAAP,0DAAO,sBAAsCC,QAAtC,CAA+C,MAA/C,CAAP;AACD;;AAED,MAAMV,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAMF,SAAS,GAAGV,MAAM,CAAC,KAAD,CAAxB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,SAAS,CAACa,OAAV,GAAoB,IAApB;AACA,WAAO,MAAM;AACXb,MAAAA,SAAS,CAACa,OAAV,GAAoB,KAApB;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AAMA,SAAOb,SAAP;AACD,CATD;;IAAME,Y","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nexport default function useFetch<T = unknown>(url: string) {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    async function fetchPosts() {\n  const isMounted = useIsMounted();\n      const response = await fetch(url);\n      setLoading(false);\n      var result;\n      if (isJson(response)) {\n        result = await response.json();\n      }\n      if (response.status === 404) {\n        result = { error404: \"Resourse not found\" };\n      } else {\n        result = result || { error: \"Somthing went wrong\" };\n      }\n\n      if (response.status >= 200 && response.status < 300) {\n        setData(result);\n      } else {\n        setError(result);\n      }\n    }\n    fetchPosts();\n  }, [url]);\n\n  return { data, loading, error };\n}\n\nfunction isJson(response: Response) {\n  return response.headers.get(\"Content-type\")?.includes(\"json\");\n}\n\nconst useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n"]},"metadata":{},"sourceType":"module"}