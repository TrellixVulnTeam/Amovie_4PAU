{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amovie\\\\Amovie\\\\movie-react\\\\src\\\\components\\\\LastNews.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"../styles/lastNews.scss\";\nimport moment from 'moment';\nimport { Link } from 'react-router-dom';\nimport useFetch from \"../\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LastNews() {\n  _s();\n\n  // const [news, setNews] = useState<News[] | null>(null);\n  // const [loading, setLoading] = useState(true);\n  // const [error, setError] = useState(null);\n  // useEffect(() =>{\n  //   async function fetchPosts(){\n  //     const response = await fetch(\"https://localhost:7063/api/lastnews\");\n  //     setLoading(false);\n  //     let result;\n  //     if(isJson(response)){\n  //      result = await response.json();\n  //     }\n  //     if(response.status === 404){\n  //       result = {error404: 'Resourse not found'}\n  //     } else{\n  //       result = result || {error: \"Somthing went wrong\"}\n  //     }\n  //     if(response.status >= 200 && response.status < 300){\n  //       setNews(result);\n  //     }\n  //     else{\n  //       setError(result);\n  //     }\n  //   }\n  //   fetchPosts();\n  // }, []);\n  const {\n    data: news,\n    error,\n    loading\n  } = useFetch('https://localhost:7063/api/lastnews');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"news-block\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title-block\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"title\",\n        children: \"Latest news\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blue-line\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }, this), news && news.map(n => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-block\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: `/news/${n.newsId}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-section\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: n.image,\n              alt: n.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"title\",\n            children: n.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text\",\n            children: n.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"info\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"BY \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: n.authorFirstName + \" \" + n.authorLastName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: moment(n.date).format('MMMM d')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)]\n    }, n.newsId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }, this)), error && JSON.stringify(error)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 7\n  }, this);\n}\n\n_s(LastNews, \"jHgDjGq5Cc9VEFpkzQsX/Rdzm8c=\", false, function () {\n  return [useFetch];\n});\n\n_c = LastNews;\nexport function isJson(response) {\n  var _response$headers$get;\n\n  return (_response$headers$get = response.headers.get('Content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('json');\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"LastNews\");","map":{"version":3,"sources":["D:/Amovie/Amovie/movie-react/src/components/LastNews.tsx"],"names":["React","moment","Link","useFetch","LastNews","data","news","error","loading","map","n","newsId","image","title","content","authorFirstName","authorLastName","date","format","JSON","stringify","isJson","response","headers","get","includes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/lastNews.scss\";\nimport moment from 'moment'\nimport { Link } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport useFetch from \"../\";\n\ntype News = {\n  newsId: number,\n  title: string,\n  image: string,\n  content:string,\n  date: string;\n  authorFirstName: string,\n  authorLastName: string\n};\n\nexport default function LastNews(){\n  // const [news, setNews] = useState<News[] | null>(null);\n  // const [loading, setLoading] = useState(true);\n  // const [error, setError] = useState(null);\n\n\n  // useEffect(() =>{\n  //   async function fetchPosts(){\n  //     const response = await fetch(\"https://localhost:7063/api/lastnews\");\n  //     setLoading(false);\n  //     let result;\n  //     if(isJson(response)){\n  //      result = await response.json();\n  //     }\n  //     if(response.status === 404){\n  //       result = {error404: 'Resourse not found'}\n  //     } else{\n  //       result = result || {error: \"Somthing went wrong\"}\n  //     }\n\n  //     if(response.status >= 200 && response.status < 300){\n  //       setNews(result);\n  //     }\n  //     else{\n  //       setError(result);\n  //     }\n  //   }\n  //   fetchPosts();\n  // }, []);\n\n  const{data:news, error, loading} = useFetch<News[]>('https://localhost:7063/api/lastnews')\n\n    return (\n      <div className=\"news-block\">\n        <div className=\"title-block\">\n          <p className=\"title\">Latest news</p>\n          <div className=\"blue-line\">\n            <div> </div>\n          </div>\n        </div>\n        {loading && <p>Loading data...</p>}\n        {news && news.map((n) => (\n          <div className=\"container\" key={n.newsId}>\n            <div className=\"content-block\">\n              <Link to={`/news/${n.newsId}`}>\n                <div className=\"image-section\">\n                  <img src={n.image} alt={n.title} />\n                </div>\n              </Link>\n              <div className=\"text-section\">\n                <h2 className=\"title\">{n.title}</h2>\n                <p className=\"text\">{n.content}</p>\n                <div className=\"info\">\n                  <p>BY <span>{n.authorFirstName + \" \" + n.authorLastName}</span></p>\n                  <p>{moment(n.date).format('MMMM d')}</p>\n                </div>\n              </div>\n            </div>\n            <hr className=\"line\" />\n          </div>\n        ))}\n        {error && JSON.stringify(error)}\n      </div>\n    );\n}\n\nexport function isJson(response:Response){\n  return response.headers.get('Content-type')?.includes('json');\n}\n\n\n"]},"metadata":{},"sourceType":"module"}