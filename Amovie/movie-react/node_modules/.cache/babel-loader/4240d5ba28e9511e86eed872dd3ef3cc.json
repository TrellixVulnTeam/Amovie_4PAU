{"ast":null,"code":"var _jsxFileName = \"D:\\\\Amovie\\\\Amovie\\\\movie-react\\\\src\\\\components\\\\LastNews.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"../styles/lastNews.scss\";\nimport moment from 'moment';\nimport { Link } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function LastNews() {\n  _s();\n\n  const [news, setNews] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchPosts() {\n      const response = await fetch(\"https://localhost:7063/api/lastnews\");\n      setLoading(false);\n      let result;\n\n      if (isJson(response)) {\n        result = await response.json();\n      }\n\n      if (response.status === 404) {\n        result = {\n          error404: 'Resourse not found'\n        };\n      } else {\n        result = result || {\n          error: \"Somthing went wrong\"\n        };\n      }\n\n      if (response.status >= 200 && response.status < 300) {\n        setNews(result);\n      } else {\n        setError(result);\n      }\n    }\n\n    fetchPosts();\n  }, []); //const{data: news, error, loading} = useFetch<News[]>(\"https://localhost:7063/api/lastnews\")\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-block\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"title\",\n          children: \"Latest news\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"blue-line\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), news && news.map(n => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-block\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: `/news/${n.newsId}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"image-section\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: n.image,\n                alt: n.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"title\",\n              children: n.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text\",\n              children: n.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"info\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"BY \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: n.authorFirstName + \" \" + n.authorLastName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: moment(n.date).format('MMMM d')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, n.newsId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)), error && JSON.stringify(error)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(LastNews, \"enRou7bdcb4q2eSWhFDpG2Jjlts=\");\n\n_c = LastNews;\nexport function isJson(response) {\n  var _response$headers$get;\n\n  return (_response$headers$get = response.headers.get('Content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes('json');\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"LastNews\");","map":{"version":3,"sources":["D:/Amovie/Amovie/movie-react/src/components/LastNews.tsx"],"names":["React","moment","Link","useEffect","useState","LastNews","news","setNews","loading","setLoading","error","setError","fetchPosts","response","fetch","result","isJson","json","status","error404","map","n","newsId","image","title","content","authorFirstName","authorLastName","date","format","JSON","stringify","headers","get","includes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/lastNews.scss\";\nimport moment from 'moment'\nimport { Link } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport useFetch from \"../hooks/useFetch\";\n\ntype News = {\n  newsId: number,\n  title: string,\n  image: string,\n  content:string,\n  date: string;\n  authorFirstName: string,\n  authorLastName: string\n};\n\nexport default function LastNews(){\n  const [news, setNews] = useState<News[] | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n\n  useEffect(() =>{\n    async function fetchPosts(){\n      const response = await fetch(\"https://localhost:7063/api/lastnews\");\n      setLoading(false);\n      let result;\n      if(isJson(response)){\n       result = await response.json();\n      }\n      if(response.status === 404){\n        result = {error404: 'Resourse not found'}\n      } else{\n        result = result || {error: \"Somthing went wrong\"}\n      }\n\n      if(response.status >= 200 && response.status < 300){\n        setNews(result);\n      }\n      else{\n        setError(result);\n      }\n    }\n    fetchPosts();\n  }, []);\n\n  //const{data: news, error, loading} = useFetch<News[]>(\"https://localhost:7063/api/lastnews\")\n\n    return (\n      <>\n      <div className=\"news-block\">\n        <div className=\"title-block\">\n          <p className=\"title\">Latest news</p>\n          <div className=\"blue-line\">\n            <div> </div>\n          </div>\n        </div>\n        {loading && <p>Loading data...</p>}\n        {news && news.map((n) => (\n          <div className=\"container\" key={n.newsId}>\n            <div className=\"content-block\">\n              <Link to={`/news/${n.newsId}`}>\n                <div className=\"image-section\">\n                  <img src={n.image} alt={n.title} />\n                </div>\n              </Link>\n              <div className=\"text-section\">\n                <h2 className=\"title\">{n.title}</h2>\n                <p className=\"text\">{n.content}</p>\n                <div className=\"info\">\n                  <p>BY <span>{n.authorFirstName + \" \" + n.authorLastName}</span></p>\n                  <p>{moment(n.date).format('MMMM d')}</p>\n                </div>\n              </div>\n            </div>\n            <hr className=\"line\" />\n          </div>\n        ))}\n        {error && JSON.stringify(error)}\n      </div>\n      </>\n    );\n}\n\nexport function isJson(response:Response){\n  return response.headers.get('Content-type')?.includes('json');\n}\n\n\n"]},"metadata":{},"sourceType":"module"}