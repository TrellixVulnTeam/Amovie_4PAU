{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport default function useFetch(url) {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchPosts() {\n      const response = await fetch(url);\n      setLoading(false);\n      var result;\n      let isMounted = true;\n\n      if (isJson(response)) {\n        result = await response.json();\n      }\n\n      if (response.status === 404) {\n        result = {\n          error404: \"Resourse not found\"\n        };\n      } else {\n        result = result || {\n          error: \"Something went wrong\"\n        };\n      } // if(response.status >= 200 && response.status < 300){\n\n\n      if (isMounted) {\n        setData(result);\n      } else {\n        return () => {\n          isMounted = false;\n        };\n      } // setData(result);\n      // } else{\n      //   setError(result);\n      // }\n\n    }\n\n    fetchPosts();\n  }, [url, data]);\n  return {\n    data,\n    loading,\n    error\n  };\n}\n\n_s(useFetch, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\n\nfunction isJson(response) {\n  var _response$headers$get;\n\n  return (_response$headers$get = response.headers.get(\"Content-type\")) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.includes(\"json\");\n}","map":{"version":3,"sources":["D:/Amovie/Amovie/movie-react/src/hooks/useFetch.tsx"],"names":["useEffect","useState","useFetch","url","data","setData","loading","setLoading","error","setError","fetchPosts","response","fetch","result","isMounted","isJson","json","status","error404","headers","get","includes"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,eAAe,SAASC,QAAT,CAA+BC,GAA/B,EAA4C;AAAA;;AACzD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAW,IAAX,CAAhC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeU,UAAf,GAA4B;AAC1B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,CAA5B;AACAI,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,UAAIM,MAAJ;AACA,UAAIC,SAAS,GAAG,IAAhB;;AACA,UAAIC,MAAM,CAACJ,QAAD,CAAV,EAAsB;AACpBE,QAAAA,MAAM,GAAG,MAAMF,QAAQ,CAACK,IAAT,EAAf;AACD;;AACD,UAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3BJ,QAAAA,MAAM,GAAG;AAAEK,UAAAA,QAAQ,EAAE;AAAZ,SAAT;AACD,OAFD,MAEO;AACLL,QAAAA,MAAM,GAAGA,MAAM,IAAI;AAAEL,UAAAA,KAAK,EAAE;AAAT,SAAnB;AACD,OAZyB,CAc1B;;;AACA,UAAIM,SAAJ,EAAe;AACbT,QAAAA,OAAO,CAACQ,MAAD,CAAP;AACD,OAFD,MAEO;AACL,eAAO,MAAM;AACXC,UAAAA,SAAS,GAAG,KAAZ;AACD,SAFD;AAGD,OArByB,CAsB1B;AACA;AACA;AACA;;AACD;;AACDJ,IAAAA,UAAU;AACX,GA7BQ,EA6BN,CAACP,GAAD,EAAMC,IAAN,CA7BM,CAAT;AA+BA,SAAO;AAAEA,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAP;AACD;;GArCuBN,Q;;AAuCxB,SAASa,MAAT,CAAgBJ,QAAhB,EAAoC;AAAA;;AAClC,kCAAOA,QAAQ,CAACQ,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAAP,0DAAO,sBAAsCC,QAAtC,CAA+C,MAA/C,CAAP;AACD","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport default function useFetch<T = unknown>(url: string) {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchPosts() {\n      const response = await fetch(url);\n      setLoading(false);\n      var result;\n      let isMounted = true;\n      if (isJson(response)) {\n        result = await response.json();\n      }\n      if (response.status === 404) {\n        result = { error404: \"Resourse not found\" };\n      } else {\n        result = result || { error: \"Something went wrong\" };\n      }\n\n      // if(response.status >= 200 && response.status < 300){\n      if (isMounted) {\n        setData(result);\n      } else {\n        return () => {\n          isMounted = false;\n        };\n      }\n      // setData(result);\n      // } else{\n      //   setError(result);\n      // }\n    }\n    fetchPosts();\n  }, [url, data]);\n\n  return { data, loading, error };\n}\n\nfunction isJson(response: Response) {\n  return response.headers.get(\"Content-type\")?.includes(\"json\");\n}\n"]},"metadata":{},"sourceType":"module"}