{"ast":null,"code":"export default function AddNews() {// const [redirect, setRedirect] = useState(false);\n  // const [dateValue, setDateValue] = useState<Date | null>(null);\n  // const url = `http://localhost:7063/api/Author/allauthors`;\n  // const { data: authors } = useFetch<AuthorType[]>(url);\n  // const {\n  //   register,\n  //   handleSubmit,\n  //   formState: { errors },\n  // } = useForm<NewsType>({ resolver: yupResolver(addNewsSchema) });\n  // const onSubmit = async (values: any) => {\n  //   const url = \"http://localhost:7063/addnews\";\n  //   const data = {\n  //     title: values.title,\n  //     image: values.image[0].name,\n  //     content: values.content,\n  //     date: moment(dateValue).format(\"YYYY-MM-DD\"),\n  //     authorId: values.authorId,\n  //   };\n  //   try {\n  //     await fetch(url, {\n  //       method: \"POST\",\n  //       body: JSON.stringify(data),\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //     });\n  //   } catch (error) {\n  //     console.error(\"Error:\", error);\n  //   }\n  //   setRedirect(true);\n  // };\n  // if (redirect) {\n  //   return <Redirect to=\"/news\" />;\n  // }\n  // return (\n  //   <Container>\n  //     <Box\n  //       component=\"form\"\n  //       onSubmit={handleSubmit(onSubmit)}\n  //       sx={{ display: \"block\", mt: 4, mb: 4 }}\n  //     >\n  //       <Grid container spacing={2} sx={{ display: \"block\" }}>\n  //         <Grid item xs={6}>\n  //           <TextField\n  //             fullWidth\n  //             id=\"title\"\n  //             label=\"News title\"\n  //             {...register(\"title\", {})}\n  //           />\n  //           {errors.title && (\n  //             <Typography style={{ color: \"#F95252\" }}>\n  //               * {errors.title.message}\n  //             </Typography>\n  //           )}\n  //         </Grid>\n  //         <Grid item xs={6}>\n  //           <TextField\n  //             fullWidth\n  //             id=\"content\"\n  //             multiline\n  //             minRows={3}\n  //             label=\"News content\"\n  //             {...register(\"content\", {})}\n  //           />\n  //           {errors.content && (\n  //             <Typography style={{ color: \"#F95252\" }}>\n  //               * {errors.content.message}\n  //             </Typography>\n  //           )}\n  //         </Grid>\n  //         <Grid item xs={6} md={3}>\n  //           <TextField fullWidth type=\"file\" {...register(\"image\")}></TextField>\n  //           <label htmlFor=\"choose-file\"></label>\n  //           {errors.image && (\n  //             <Typography style={{ color: \"#F95252\" }}>\n  //               * {errors.image.message}\n  //             </Typography>\n  //           )}\n  //         </Grid>\n  //         <Grid item xs={6} md={3}>\n  //           <LocalizationProvider dateAdapter={AdapterDateFns}>\n  //             <DatePicker\n  //               label=\"News Date\"\n  //               value={dateValue}\n  //               onChange={(newValue) => {\n  //                 setDateValue(newValue);\n  //               }}\n  //               renderInput={(register) => (\n  //                 <TextField fullWidth {...register} name=\"date\" />\n  //               )}\n  //             />\n  //           </LocalizationProvider>\n  //           {errors.date && (\n  //             <Typography style={{ color: \"#F95252\" }}>\n  //               * {errors.date.message}\n  //             </Typography>\n  //           )}\n  //         </Grid>\n  //         <Grid item xs={3}>\n  //           <FormControl fullWidth>\n  //             <InputLabel\n  //               variant=\"standard\"\n  //               htmlFor=\"uncontrolled-native\"\n  //             ></InputLabel>\n  //             <NativeSelect defaultValue={30} {...register(\"authorId\")}>\n  //               {authors &&\n  //                 authors?.map((author) => (\n  //                   <option key={author.id} value={author.id}>\n  //                     {author.firstName.concat(\" \")}\n  //                     {author.lastName}\n  //                   </option>\n  //                 ))}\n  //             </NativeSelect>\n  //           </FormControl>\n  //           {errors.authorId && (\n  //             <Typography style={{ color: \"#F95252\" }}>\n  //               * {errors.authorId.message}\n  //             </Typography>\n  //           )}\n  //         </Grid>\n  //         <Button type=\"submit\" variant=\"contained\" sx={{ mt: 3, ml: 2 }}>\n  //           Save changes\n  //         </Button>\n  //       </Grid>\n  //     </Box>\n  //   </Container>\n  // );\n}\n_c = AddNews;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNews\");","map":{"version":3,"sources":["D:/Amovie/Amovie/movie-react/src/components/AddNews.tsx"],"names":["AddNews"],"mappings":"AAuBA,eAAe,SAASA,OAAT,GAAmB,CAChxIuBA,O","sourcesContent":["import { yupResolver } from \"@hookform/resolvers/yup\";\nimport {\n  Container,\n  Grid,\n  TextField,\n  Typography,\n  Box,\n  Button,\n} from \"@mui/material\";\nimport { useContext, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Redirect } from \"react-router-dom\";\nimport { addNewsSchema } from \"../validations/addNewsValidation\";\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport moment from \"moment\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport NativeSelect from \"@mui/material/NativeSelect\";\nimport useFetch from \"../hooks/useFetch\";\nimport { AuthorType, NewsType } from \"../Types/Types\";\n\nexport default function AddNews() {\n  // const [redirect, setRedirect] = useState(false);\n  // const [dateValue, setDateValue] = useState<Date | null>(null);\n\n  // const url = `http://localhost:7063/api/Author/allauthors`;\n  // const { data: authors } = useFetch<AuthorType[]>(url);\n\n  // const {\n  //   register,\n  //   handleSubmit,\n  //   formState: { errors },\n  // } = useForm<NewsType>({ resolver: yupResolver(addNewsSchema) });\n\n  // const onSubmit = async (values: any) => {\n  //   const url = \"http://localhost:7063/addnews\";\n  //   const data = {\n  //     title: values.title,\n  //     image: values.image[0].name,\n  //     content: values.content,\n  //     date: moment(dateValue).format(\"YYYY-MM-DD\"),\n  //     authorId: values.authorId,\n  //   };\n  //   try {\n  //     await fetch(url, {\n  //       method: \"POST\",\n  //       body: JSON.stringify(data),\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //     });\n  //   } catch (error) {\n  //     console.error(\"Error:\", error);\n  //   }\n  //   setRedirect(true);\n  // };\n\n  // if (redirect) {\n  //   return <Redirect to=\"/news\" />;\n  // }\n\n  // return (\n  //   <Container>\n  //     <Box\n  //       component=\"form\"\n  //       onSubmit={handleSubmit(onSubmit)}\n  //       sx={{ display: \"block\", mt: 4, mb: 4 }}\n  //     >\n  //       <Grid container spacing={2} sx={{ display: \"block\" }}>\n  //         <Grid item xs={6}>\n  //           <TextField\n  //             fullWidth\n  //             id=\"title\"\n  //             label=\"News title\"\n  //             {...register(\"title\", {})}\n  //           />\n  //           {errors.title && (\n  //             <Typography style={{ color: \"#F95252\" }}>\n  //               * {errors.title.message}\n  //             </Typography>\n  //           )}\n  //         </Grid>\n\n  //         <Grid item xs={6}>\n  //           <TextField\n  //             fullWidth\n  //             id=\"content\"\n  //             multiline\n  //             minRows={3}\n  //             label=\"News content\"\n  //             {...register(\"content\", {})}\n  //           />\n  //           {errors.content && (\n  //             <Typography style={{ color: \"#F95252\" }}>\n  //               * {errors.content.message}\n  //             </Typography>\n  //           )}\n  //         </Grid>\n\n  //         <Grid item xs={6} md={3}>\n  //           <TextField fullWidth type=\"file\" {...register(\"image\")}></TextField>\n  //           <label htmlFor=\"choose-file\"></label>\n  //           {errors.image && (\n  //             <Typography style={{ color: \"#F95252\" }}>\n  //               * {errors.image.message}\n  //             </Typography>\n  //           )}\n  //         </Grid>\n\n  //         <Grid item xs={6} md={3}>\n  //           <LocalizationProvider dateAdapter={AdapterDateFns}>\n  //             <DatePicker\n  //               label=\"News Date\"\n  //               value={dateValue}\n  //               onChange={(newValue) => {\n  //                 setDateValue(newValue);\n  //               }}\n  //               renderInput={(register) => (\n  //                 <TextField fullWidth {...register} name=\"date\" />\n  //               )}\n  //             />\n  //           </LocalizationProvider>\n  //           {errors.date && (\n  //             <Typography style={{ color: \"#F95252\" }}>\n  //               * {errors.date.message}\n  //             </Typography>\n  //           )}\n  //         </Grid>\n  //         <Grid item xs={3}>\n  //           <FormControl fullWidth>\n  //             <InputLabel\n  //               variant=\"standard\"\n  //               htmlFor=\"uncontrolled-native\"\n  //             ></InputLabel>\n  //             <NativeSelect defaultValue={30} {...register(\"authorId\")}>\n  //               {authors &&\n  //                 authors?.map((author) => (\n  //                   <option key={author.id} value={author.id}>\n  //                     {author.firstName.concat(\" \")}\n  //                     {author.lastName}\n  //                   </option>\n  //                 ))}\n  //             </NativeSelect>\n  //           </FormControl>\n  //           {errors.authorId && (\n  //             <Typography style={{ color: \"#F95252\" }}>\n  //               * {errors.authorId.message}\n  //             </Typography>\n  //           )}\n  //         </Grid>\n  //         <Button type=\"submit\" variant=\"contained\" sx={{ mt: 3, ml: 2 }}>\n  //           Save changes\n  //         </Button>\n  //       </Grid>\n  //     </Box>\n  //   </Container>\n  // );\n}\n"]},"metadata":{},"sourceType":"module"}